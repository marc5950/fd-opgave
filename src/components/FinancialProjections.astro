---
//@ts-nocheck
import fP from "@data/financialProjections.json";
import DynamicIcon from "./helpers/DynamicIcon.astro";
console.log(fP);
---

<section
  class="container"
  style="--container-background: var(--secondary-color01)"
>
  <div class="financial-projections">
    <div class="financial-projections-content">
      <div class="carousel-info">
        <h2>{fP.title}</h2>
        <p>{fP.subtitle}</p>
      </div>
      <div class="carousel-nav">
        <a href="#fp-prev" class="arrow-left" aria-label="Previous slide">
          <DynamicIcon name="arrow-left" />
        </a>
        <a href="#fp-next" class="arrow-right" aria-label="Next slide">
          <DynamicIcon name="arrow--right" />
        </a>
      </div>
    </div>
    <ul id="fp-carousel">
      {
        fP.values.map((values, i) => (
          <li id={`fp-${i}`}>
            <DynamicIcon name={values.icon} />
            <h3>{values.title}</h3>
            <p>{values.description}</p>
          </li>
        ))
      }
    </ul>
  </div>
</section>

<style>
  @layer components {
    .financial-projections {
      margin: 0 auto;
      padding: 2rem 0;
      grid-column: full;
      display: grid;
      grid-template-columns: inherit;
      row-gap: 1rem;
      .financial-projections-content {
        grid-column: content;
        display: flex;
        justify-content: space-between;
        align-items: end;
        margin-bottom: 2rem;
        .carousel-info {
          p {
            max-width: 65ch;
            --text-color: var(--text-gray);
          }
        }
        .carousel-nav {
          display: flex;
          gap: 1rem;
          a {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0.7rem;
            width: 3rem;
            height: 3rem;
            background: var(--primary-color03);
            color: var(--secondary-color02);
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;

            svg {
              width: 1.2rem;
              height: 1.2rem;
            }

            &:hover {
              background: var(--primary-color01);
              color: var(--primary-color03);
            }
          }
        }
      }
    }

    ul {
      grid-column: full;
      display: flex;
      gap: 2rem;
      overflow-x: auto;
      overflow-y: hidden;
      list-style: none;
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
      padding-inline: max(1rem, 50% - 1200px / 2);
      padding-block-end: 1rem;
      padding-top: 1rem;

      /* Scroll-bar style */
      scrollbar-width: thin;
      scrollbar-color: var(--primary-color03) transparent;

      li {
        display: flex;
        flex-basis: min(700px, 90%);
        flex-shrink: 0;
        scroll-snap-align: center;
        flex-direction: column;
        gap: 0.7rem;
        background: var(--secondary-color02);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;

        svg {
          width: 40px;
          height: 40px;
          color: var(--primary-color03);
        }

        h3 {
          --font-size: var(--heading06);
        }

        p {
          --text-color: var(--text-gray);
        }
        &:hover {
          transform: translateY(-3px);
          background: var(--primary-color03);
          h3,
          p {
            --text-color: var(--text-light);
          }
          svg {
            color: var(--primary-color01);
          }
        }
      }
    }
  }
</style>

<script>
  // Horizontal scroll with mouse wheel
  const carousel = document.querySelector("#fp-carousel");

  // Arrow navigation
  const leftArrow = document.querySelector(".arrow-left");
  const rightArrow = document.querySelector(".arrow-right");

  if (leftArrow && rightArrow && carousel) {
    const scrollAmount = 720; // scroll one card width + gap

    leftArrow.addEventListener("click", (e) => {
      e.preventDefault();
      carousel.scrollBy({ left: -scrollAmount, behavior: "smooth" });
    });

    rightArrow.addEventListener("click", (e) => {
      e.preventDefault();
      carousel.scrollBy({ left: scrollAmount, behavior: "smooth" });
    });
  }
</script>
